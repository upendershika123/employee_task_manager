// This file is automatically generated. Do not edit it directly.
import { createClient, AuthFlowType, AuthChangeEvent, Session } from '@supabase/supabase-js';
import type { Database } from './types';

// Debug: Log environment variable status
console.log('Environment Variables Debug:', {
  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? 'Set' : 'Not Set',
  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Set' : 'Not Set',
  VITE_APP_URL: import.meta.env.VITE_APP_URL ? 'Set' : 'Not Set',
  MODE: import.meta.env.MODE, // This will show if we're in development or production
  ORIGIN: window.location.origin // Log the current origin for debugging
});

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceKey = import.meta.env.VITE_SUPABASE_SERVICE_KEY;

// Get the app URL, ensuring it doesn't end with a slash
const getAppUrl = () => {
  if (import.meta.env.MODE === 'production') {
    const url = import.meta.env.VITE_APP_URL || window.location.origin;
    return url.endsWith('/') ? url.slice(0, -1) : url;
  }
  return window.location.origin;
};

const appUrl = getAppUrl();

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Environment Variables Status:', {
    VITE_SUPABASE_URL: supabaseUrl ? 'Present' : 'Missing',
    VITE_SUPABASE_ANON_KEY: supabaseAnonKey ? 'Present' : 'Missing'
  });
  throw new Error('Missing Supabase environment variables. Please check your .env file and ensure it is in the project root.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Debug flag to track client initialization
let clientInitialized = false;

// Common client options
const clientOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce' as AuthFlowType,
    redirectTo: `${appUrl}/auth/callback`,
    storageKey: 'supabase.auth.token',
    storage: {
      getItem: (key: string) => {
        try {
          const item = localStorage.getItem(key);
          if (item) {
            const parsed = JSON.parse(item);
            console.log('Retrieved from storage:', { key, value: parsed });
            return parsed;
          }
          return null;
        } catch (error) {
          console.error('Error getting item from storage:', error);
          return null;
        }
      },
      setItem: (key: string, value: any) => {
        try {
          console.log('Storing in storage:', { key, value });
          localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
          console.error('Error setting item in storage:', error);
        }
      },
      removeItem: (key: string) => {
        try {
          console.log('Removing from storage:', key);
          localStorage.removeItem(key);
        } catch (error) {
          console.error('Error removing item from storage:', error);
        }
      }
    },
    debug: true, // Enable debug mode for auth
    onAuthStateChange: (event: AuthChangeEvent, session: Session | null) => {
      console.log('Auth state changed:', event, session);
    },
    // Add email link handling
    emailRedirectTo: `${appUrl}/auth/callback`
  },
  global: {
    headers: {
      'X-Client-Info': 'emp-power-plan@1.0.0',
    }
  }
};

// Create two clients - one for regular operations and one for admin operations
export const supabase = (() => {
  if (clientInitialized) {
    console.warn('Attempting to initialize Supabase client multiple times');
    return null;
  }
  clientInitialized = true;
  const client = createClient<Database>(supabaseUrl, supabaseAnonKey, clientOptions);
  
  // Add error handling for auth flow
  client.auth.onAuthStateChange((event, session) => {
    if (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') {
      console.log('Auth state changed:', event, session);
    } else if (event === 'SIGNED_OUT') {
      console.log('User signed out');
      // Clear any stored auth state
      localStorage.removeItem('supabase.auth.token');
    } else if (event === 'USER_UPDATED') {
      console.log('User updated:', session?.user);
    } else if (event === 'PASSWORD_RECOVERY') {
      console.log('Password recovery initiated');
    }
  });

  // Handle email link errors and PKCE flow
  client.auth.getSession().then(({ data: { session }, error }) => {
    if (error) {
      console.error('Session error:', error);
      if (error.message.includes('Email link is invalid or has expired') || 
          error.message.includes('both auth code and code verifier should be non-empty')) {
        // Clear any stored auth state
        localStorage.removeItem('supabase.auth.token');
        // Redirect to login page
        window.location.href = '/login';
      }
    }
  }).catch((error) => {
    console.error('Error checking session:', error);
  });

  return client;
})();

// Create a separate client with the service key for admin operations
export const supabaseAdmin = supabaseServiceKey
  ? createClient<Database>(supabaseUrl, supabaseServiceKey, clientOptions)
  : supabase;

// Log the current configuration for debugging
console.log('Supabase Configuration:', {
  url: supabaseUrl,
  hasAnonKey: !!supabaseAnonKey,
  hasServiceKey: !!supabaseServiceKey,
  appUrl,
  origin: window.location.origin,
  clientInitialized
});