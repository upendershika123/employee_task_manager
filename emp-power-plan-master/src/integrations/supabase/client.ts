// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Debug: Log environment variable status
console.log('Environment Variables Debug:', {
  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? 'Set' : 'Not Set',
  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Set' : 'Not Set',
  VITE_APP_URL: import.meta.env.VITE_APP_URL ? 'Set' : 'Not Set',
  MODE: import.meta.env.MODE, // This will show if we're in development or production
  ORIGIN: window.location.origin // Log the current origin for debugging
});

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceKey = import.meta.env.VITE_SUPABASE_SERVICE_KEY;
const appUrl = import.meta.env.MODE === 'production' 
  ? import.meta.env.VITE_APP_URL 
  : window.location.origin;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Environment Variables Status:', {
    VITE_SUPABASE_URL: supabaseUrl ? 'Present' : 'Missing',
    VITE_SUPABASE_ANON_KEY: supabaseAnonKey ? 'Present' : 'Missing'
  });
  throw new Error('Missing Supabase environment variables. Please check your .env file and ensure it is in the project root.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Debug flag to track client initialization
let clientInitialized = false;

// Common client options
const clientOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    redirectTo: `${appUrl}/auth/callback`
  },
  global: {
    headers: {
      'X-Client-Info': 'emp-power-plan@1.0.0',
    }
  }
};

// Create two clients - one for regular operations and one for admin operations
export const supabase = (() => {
  if (clientInitialized) {
    console.warn('Attempting to initialize Supabase client multiple times');
    return null;
  }
  clientInitialized = true;
  return createClient<Database>(supabaseUrl, supabaseAnonKey, clientOptions);
})();

// Create a separate client with the service key for admin operations
export const supabaseAdmin = supabaseServiceKey
  ? createClient<Database>(supabaseUrl, supabaseServiceKey, clientOptions)
  : supabase;

// Log the current configuration for debugging
console.log('Supabase Configuration:', {
  url: supabaseUrl,
  hasAnonKey: !!supabaseAnonKey,
  hasServiceKey: !!supabaseServiceKey,
  appUrl,
  origin: window.location.origin,
  clientInitialized
});